/*
 * (C) 2006 Dirk W. Hoffmann. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "C64.h"

void 
VIC::getColor(ColorScheme scheme, int nr, uint8_t *r, uint8_t *g, uint8_t *b)
{
	uint8_t rgb[12][16][3] = {

		/* Source: http://www.geocities.com/Area51/Vault/8611/cbm/c64col.htm */

		/* CCS64 */
		0x10, 0x10, 0x10,
		0xff, 0xff, 0xff,
		0xe0, 0x40, 0x40,
		0x60, 0xff, 0xff,
		0xe0, 0x60, 0xe0,
		0x40, 0xe0, 0x40,
		0x40, 0x40, 0xe0,
		0xff, 0xff, 0x40,
		0xe0, 0xa0, 0x40,
		0x9c, 0x74, 0x48,
		0xff, 0xa0, 0xa0,
		0x54, 0x54, 0x54,
		0x88, 0x88, 0x88,
		0xa0, 0xff, 0xa0,
		0xa0, 0xa0, 0xff,
		0xc0, 0xc0, 0xc0,

		/* VICE */
		0x00, 0x00, 0x00,
		0xff, 0xff, 0xff,
		0xbd, 0x18, 0x21,
		0x31, 0xe7, 0xc6,
		0xb5, 0x18, 0xe7,
		0x18, 0xd6, 0x18,
		0x21, 0x18, 0xad,
		0xde, 0xf7, 0x08,
		0xbd, 0x42, 0x00,
		0x6b, 0x31, 0x00,
		0xff, 0x4a, 0x52,
		0x42, 0x42, 0x42,
		0x73, 0x73, 0x6b,
		0x5a, 0xff, 0x5a,
		0x5a, 0x52, 0xff,
		0xa5, 0xa5, 0xa5,
		
		/* FRODO */
		0x00, 0x00, 0x00,
		0xff, 0xff, 0xff,
		0xcc, 0x00, 0x00,
		0x00, 0xff, 0xcc,
		0xff, 0x00, 0xff,
		0x00, 0xcc, 0x00,
		0x00, 0x00, 0xcc,
		0xff, 0xff, 0x00,
		0xff, 0x88, 0x00,
		0x88, 0x44, 0x00,
		0xff, 0x88, 0x88,
		0x44, 0x44, 0x44,
		0x88, 0x88, 0x88,
		0x88, 0xff, 0x88,
		0x88, 0x88, 0xff,
		0xcc, 0xcc, 0xcc,
		
		/* PC64 */
		0x21, 0x21, 0x21,
		0xff, 0xff, 0xff,
		0xb5, 0x21, 0x21,
		0x73, 0xff, 0xff,
		0xb5, 0x21, 0xb5,
		0x21, 0xb5, 0x21,
		0x21, 0x21, 0xb5,
		0xff, 0xff, 0x21,
		0xb5, 0x73, 0x21,
		0x94, 0x42, 0x21,
		0xff, 0x73, 0x73,
		0x73, 0x73, 0x73,
		0x94, 0x94, 0x94,
		0x73, 0xff, 0x73,
		0x73, 0x73, 0xff,
		0xb5, 0xb5, 0xb5,
		
		/* C64S */
		0x00, 0x00, 0x00,
		0xfc, 0xfc, 0xfc,
		0xa8, 0x00, 0x00,
		0x54, 0xfc, 0xfc,
		0xa8, 0x00, 0xa8,
		0x00, 0xa8, 0x00,
		0x00, 0x00, 0xa8,
		0xfc, 0xfc, 0x00,
		0xa8, 0x54, 0x00,
		0x80, 0x2c, 0x00,
		0xfc, 0x54, 0x54,
		0x54, 0x54, 0x54,
		0x80, 0x80, 0x80,
		0x54, 0xfc, 0x54,
		0x54, 0x54, 0xfc,
		0xa8, 0xa8, 0xa8,
		
		/* ALEC64 */
		0x00, 0x00, 0x00,
		0xfc, 0xfc, 0xfc,
		0x9c, 0x00, 0x00,
		0x00, 0xbc, 0xbc,
		0xbc, 0x00, 0xbc,
		0x00, 0x9c, 0x00,
		0x00, 0x00, 0x9c,
		0xfc, 0xfc, 0x00,
		0xfc, 0x58, 0x00,
		0x78, 0x38, 0x00,
		0xfc, 0x00, 0x00,
		0x3c, 0x3c, 0x3c,
		0x7c, 0x7c, 0x7c,
		0x00, 0xfc, 0x00,
		0x00, 0x00, 0xfc,
		0xbc, 0xbc, 0xbc,
		
		/* WIN64 */
		0x00, 0x00, 0x00,
		0xff, 0xff, 0xff,
		0x68, 0x00, 0x14,
		0x00, 0xc0, 0xac,
		0x94, 0x00, 0x98,
		0x5c, 0x98, 0x5e, // exchanged with LTGREEN
		0x04, 0x10, 0xb0,
		0xfc, 0xfc, 0x00,
		0xf9, 0x9a, 0x1a,
		0x50, 0x20, 0x14,
		0xfc, 0x50, 0x80,
		0x46, 0x46, 0x46,
		0x73, 0x73, 0x73,
		0x24, 0xf0, 0x00, // exchanged with GREEN
		0x5e, 0x70, 0xf2,
		0xac, 0xac, 0xac,
		
		/* C64ALIVE */
		0x00, 0x00, 0x00,
		0xfc, 0xfc, 0xfc,
		0xb0, 0x00, 0x00,
		0x00, 0xb8, 0xb8,
		0xa0, 0x00, 0xa0,
		0x00, 0xbc, 0x00,
		0x00, 0x00, 0xa0,
		0xf8, 0xfc, 0x50,
		0xcc, 0x64, 0x00,
		0x98, 0x4c, 0x28,
		0xf4, 0x88, 0x90,
		0x58, 0x58, 0x58,
		0x94, 0x94, 0x94,
		0x68, 0xfc, 0x80,
		0x68, 0x80, 0xf8,
		0xd8, 0xd8, 0xd8,
		
		/* GODOT */
		0x00, 0x00, 0x00,
		0xff, 0xff, 0xff,
		0x88, 0x00, 0x00,
		0xaa, 0xff, 0xee,
		0xcc, 0x44, 0xcc,
		0x00, 0xcc, 0x55,
		0x00, 0x00, 0xaa,
		0xee, 0xee, 0x77,
		0xdd, 0x88, 0x55,
		0x66, 0x44, 0x00,
		0xfe, 0x77, 0x77,
		0x33, 0x33, 0x33,
		0x77, 0x77, 0x77,
		0xaa, 0xff, 0x66,
		0x00, 0x88, 0xff,
		0xbb, 0xbb, 0xbb,
		
		/* C64SALLY */
		0x00, 0x00, 0x00,
		0xfc, 0xfc, 0xfc,
		0xc8, 0x00, 0x00,
		0x00, 0xfc, 0xfc,
		0xfc, 0x00, 0xfc,
		0x00, 0xc8, 0x00,
		0x00, 0x00, 0xc8,
		0xfc, 0xfc, 0x00,
		0xfc, 0x64, 0x00,
		0xc0, 0x64, 0x00,
		0xfc, 0x64, 0x64,
		0x40, 0x40, 0x40,
		0x80, 0x80, 0x80,
		0x64, 0xfc, 0x64,
		0x64, 0x64, 0xf0,
		0xc0, 0xc0, 0xc0,
		
		/* PEPTO */
		0x00, 0x00, 0x00,
		0xff, 0xff, 0xff,
		0x68, 0x37, 0x2b,
		0x70, 0xa4, 0xb2,
		0x6f, 0x3d, 0x86,
		0x58, 0x8d, 0x43,
		0x35, 0x28, 0x79,
		0xb8, 0xc7, 0x6f,
		0x6f, 0x4f, 0x25,
		0x43, 0x39, 0x00,
		0x9A, 0x67, 0x59,
		0x44, 0x44, 0x44,
		0x6c, 0x6c, 0x6c,
		0x9a, 0xd2, 0x84,
		0x6c, 0x5e, 0xb5,
		0x95, 0x95, 0x95,
		
		/* GRAYSCALE */
		0x10, 0x10, 0x10,
		0xff, 0xff, 0xff,
		0x70, 0x70, 0x70,
		0xE1, 0xE1, 0xE1,
		0x8c, 0x8c, 0x8c,
		0xB9, 0xB9, 0xB9,
		0x55, 0x55, 0x55,
		0xed, 0xed, 0xed,
		0xa5, 0xa5, 0xa5,
		0x78, 0x78, 0x78,
		0xb4, 0xb4, 0xb4,
		0x54, 0x54, 0x54,
		0x88, 0x88, 0x88,
		0xdc, 0xdc, 0xdc,
		0xa7, 0xa7, 0xa7,
		0xc0, 0xc0, 0xc0
	};
	
	assert(scheme >= 0 && scheme < 12);
	assert(nr >= 0 && nr < 16);
	
	*r = rgb[scheme][nr][0];
	*g = rgb[scheme][nr][1];
	*b = rgb[scheme][nr][2];
}


void 
VIC::setColor(int nr, uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)
{
	uint8_t *color = (uint8_t *)(&colors[nr]);

	assert(nr >= 0 && nr < 16);
	
	color[0] = red;
	color[1] = green;
	color[2] = blue;
	color[3] = alpha;
}

void 
VIC::setColorScheme(ColorScheme scheme)
{
	uint8_t i, r, g, b;
	
	for (i = 0; i < 16; i++) {
		getColor(scheme, i, &r, &g, &b);
		setColor(i, r, g, b);
	}

#if 0		 
	switch (scheme) {

		case PEPTO: // TIMMERMANN:
			setColor(BLACK,   0x00, 0x00, 0x00); // 00 00 00
			setColor(WHITE,   0xff, 0xff, 0xff); // FF FF FF
			setColor(RED,     0x68, 0x37, 0x2b); // 68 37 2B
			setColor(CYAN,    0x70, 0xa4, 0xb2); // 70 A4 B2
			setColor(PURPLE,  0x6f, 0x3d, 0x86); // 6F 3D 86
			setColor(GREEN,   0x58, 0x8d, 0x43); // 58 8D 43
			setColor(BLUE,    0x35, 0x28, 0x79); // 35 28 79
			setColor(YELLOW,  0xb8, 0xc7, 0x6f); // B8 C7 6F
			setColor(LTBROWN, 0x6f, 0x4f, 0x25); // 6F 4F 25
			setColor(BROWN,   0x43, 0x39, 0x00); // 43 39 00
			setColor(LTRED,   0x9A, 0x67, 0x59); // 9A 67 59
			setColor(GREY1,   0x44, 0x44, 0x44); // 44 44 44
			setColor(GREY2,   0x6c, 0x6c, 0x6c); // 6C 6C 6C
			setColor(LTGREEN, 0x9a, 0xd2, 0x84); // 9A D2 84
			setColor(LTBLUE,  0x6c, 0x5e, 0xb5); // 6C 5E B5
			setColor(GREY3,   0x95, 0x95, 0x95); // 95 95 95
			break;
			
		case PC64:
			setColor(BLACK,   0x21, 0x21, 0x21);
			setColor(WHITE,   0xff, 0xff, 0xff);
			setColor(RED,     0xb5, 0x21, 0x21);
			setColor(CYAN,    0x73, 0xff, 0xff);
			setColor(PURPLE,  0xb5, 0x21, 0xb5);
			setColor(GREEN,   0x21, 0xb5, 0x21);			
			setColor(BLUE,    0x21, 0x21, 0xb5); 
			setColor(YELLOW,  0xff, 0xff, 0x21);
			setColor(LTBROWN, 0xb5, 0x73, 0x21); 
			setColor(BROWN,   0x94, 0x42, 0x21); 
			setColor(LTRED,   0xff, 0x73, 0x73); 
			setColor(GREY1,   0x73, 0x73, 0x73); 
			setColor(GREY2,   0x94, 0x94, 0x94);
			setColor(LTGREEN, 0x73, 0xff, 0x73);
			setColor(LTBLUE,  0x73, 0x73, 0xff);
			setColor(GREY3,   0xb5, 0xb5, 0xb5);
			break;
						
		case C64S:
			setColor(BLACK,   0x00, 0x00, 0x00);
			setColor(WHITE,   0xfc, 0xfc, 0xfc);
			setColor(RED,     0xa8, 0x00, 0x00);
			setColor(CYAN,    0x54, 0xfc, 0xfc);
			setColor(PURPLE,  0xa8, 0x00, 0xa8);
			setColor(GREEN,   0x00, 0xa8, 0x00);
			setColor(BLUE,    0x00, 0x00, 0xa8); 
			setColor(YELLOW,  0xfc, 0xfc, 0x00);
			setColor(LTBROWN, 0xa8, 0x54, 0x00); 
			setColor(BROWN,   0x80, 0x2c, 0x00); 
			setColor(LTRED,   0xfc, 0x54, 0x54); 
			setColor(GREY1,   0x54, 0x54, 0x54); 
			setColor(GREY2,   0x80, 0x80, 0x80);
			setColor(LTGREEN, 0x54, 0xfc, 0x54);
			setColor(LTBLUE,  0x54, 0x54, 0xfc);
			setColor(GREY3,   0xa8, 0xa8, 0xa8);
			break;
																	
		case VICE:
			setColor(BLACK,   0x00, 0x00, 0x00);
			setColor(WHITE,   0xff, 0xff, 0xff);
			setColor(RED,     0xbd, 0x18, 0x21);
			setColor(CYAN,    0x31, 0xe7, 0xc6);
			setColor(PURPLE,  0xb5, 0x18, 0xe7);
			setColor(GREEN,   0x18, 0xd6, 0x18);
			setColor(BLUE,    0x21, 0x18, 0xad); 
			setColor(YELLOW,  0xde, 0xf7, 0x08);
			setColor(LTBROWN, 0xbd, 0x42, 0x00); 
			setColor(BROWN,   0x6b, 0x31, 0x00); 
			setColor(LTRED,   0xff, 0x4a, 0x52); 
			setColor(GREY1,   0x42, 0x42, 0x42); 
			setColor(GREY2,   0x73, 0x73, 0x6b);
			setColor(LTGREEN, 0x5a, 0xff, 0x5a);
			setColor(LTBLUE,  0x5a, 0x52, 0xff);
			setColor(GREY3,   0xa5, 0xa5, 0xa5);
			break;
																	
		case CCS64:
			setColor(BLACK,   0x10, 0x10, 0x10);
			setColor(WHITE,   0xff, 0xff, 0xff);
			setColor(RED,     0xe0, 0x40, 0x40);
			setColor(CYAN,    0x60, 0xff, 0xff);
			setColor(PURPLE,  0xe0, 0x60, 0xe0);
			setColor(GREEN,   0x40, 0xe0, 0x40);
			setColor(BLUE,    0x40, 0x40, 0xe0); 
			setColor(YELLOW,  0xff, 0xff, 0x40);
			setColor(LTBROWN, 0xe0, 0xa0, 0x40); 
			setColor(BROWN,   0x9c, 0x74, 0x48); 
			setColor(LTRED,   0xff, 0xa0, 0xa0); 
			setColor(GREY1,   0x54, 0x54, 0x54); 
			setColor(GREY2,   0x88, 0x88, 0x88);
			setColor(LTGREEN, 0xa0, 0xff, 0xa0);
			setColor(LTBLUE,  0xa0, 0xa0, 0xff);
			setColor(GREY3,   0xc0, 0xc0, 0xc0);
			break;
												
		case ALEC64:
			setColor(BLACK,   0x00, 0x00, 0x00);
			setColor(WHITE,   0xfc, 0xfc, 0xfc);
			setColor(RED,     0x9c, 0x00, 0x00);
			setColor(CYAN,    0x00, 0xbc, 0xbc);
			setColor(PURPLE,  0xbc, 0x00, 0xbc);
			setColor(GREEN,   0x00, 0x9c, 0x00);
			setColor(BLUE,    0x00, 0x00, 0x9c); 
			setColor(YELLOW,  0xfc, 0xfc, 0x00);
			setColor(LTBROWN, 0xfc, 0x58, 0x00); 
			setColor(BROWN,   0x78, 0x38, 0x00); 
			setColor(LTRED,   0xfc, 0x00, 0x00); 
			setColor(GREY1,   0x3c, 0x3c, 0x3c); 
			setColor(GREY2,   0x7c, 0x7c, 0x7c);
			setColor(LTGREEN, 0x00, 0xfc, 0x00);
			setColor(LTBLUE,  0x00, 0x00, 0xfc);
			setColor(GREY3,   0xbc, 0xbc, 0xbc);
			break;
																	
		case WIN64:
			setColor(BLACK,   0x00, 0x00, 0x00);
			setColor(WHITE,   0xff, 0xff, 0xff);		
			setColor(RED,     0x68, 0x00, 0x14);
			setColor(CYAN,    0x00, 0xc0, 0xac);
			setColor(PURPLE,  0x94, 0x00, 0x98);
			setColor(GREEN,   0x5c, 0x98, 0x5e); // exchanged with LTGREEN
			setColor(BLUE,    0x04, 0x10, 0xb0); 
			setColor(YELLOW,  0xfc, 0xfc, 0xfc);
			setColor(LTBROWN, 0xf9, 0x9a, 0x1a); 
			setColor(BROWN,   0x50, 0x20, 0x14); 
			setColor(LTRED,   0xfc, 0x50, 0x80); 
			setColor(GREY1,   0x46, 0x46, 0x46); 
			setColor(GREY2,   0x73, 0x73, 0x73);
			setColor(LTGREEN, 0x24, 0xf0, 0x00); // exchanged with GREEN
			setColor(LTBLUE,  0x5e, 0x70, 0xf2);
			setColor(GREY3,   0xac, 0xac, 0xac);
			break;
												
		case C64ALIVE_0_9:
			setColor(BLACK,   0x00, 0x00, 0x00);
			setColor(WHITE,   0xfc, 0xfc, 0xfc);
			setColor(RED,     0xb0, 0x00, 0x00);
			setColor(CYAN,    0x00, 0xb8, 0xb8);
			setColor(PURPLE,  0xa0, 0x00, 0xa0);
			setColor(GREEN,   0x00, 0xbc, 0x00);
			setColor(BLUE,    0x00, 0x00, 0xa0); 
			setColor(YELLOW,  0xf8, 0xfc, 0x50);
			setColor(LTBROWN, 0xcc, 0x64, 0x00); 
			setColor(BROWN,   0x98, 0x4c, 0x28); 
			setColor(LTRED,   0xf4, 0x88, 0x90); 
			setColor(GREY1,   0x58, 0x58, 0x58); 
			setColor(GREY2,   0x94, 0x94, 0x94);
			setColor(LTGREEN, 0x68, 0xfc, 0x80);
			setColor(LTBLUE,  0x68, 0x80, 0xf8);
			setColor(GREY3,   0xd8, 0xd8, 0xd8);
			break;
														
		case FRODO:
			setColor(BLACK,   0x00, 0x00, 0x00);
			setColor(WHITE,   0xff, 0xff, 0xff);
			setColor(RED,     0xcc, 0x00, 0x00);
			setColor(CYAN,    0x00, 0xff, 0xcc);
			setColor(PURPLE,  0xff, 0x00, 0xff);
			setColor(GREEN,   0x00, 0xcc, 0x00);
			setColor(BLUE,    0x00, 0x00, 0xcc); 
			setColor(YELLOW,  0xff, 0xff, 0x00);
			setColor(LTBROWN, 0xff, 0x88, 0x00); 
			setColor(BROWN,   0x88, 0x44, 0x00); 
			setColor(LTRED,   0xff, 0x88, 0x88); 
			setColor(GREY1,   0x44, 0x44, 0x44); 
			setColor(GREY2,   0x88, 0x88, 0x88);
			setColor(LTGREEN, 0x88, 0xff, 0x88);
			setColor(LTBLUE,  0x88, 0x88, 0xff);
			setColor(GREY3,   0xcc, 0xcc, 0xcc);
			break;
														
		case GODOT:
			setColor(BLACK,   0x00, 0x00, 0x00);
			setColor(WHITE,   0xff, 0xff, 0xff);
			setColor(RED,     0x88, 0x00, 0x00);
			setColor(CYAN,    0xaa, 0xff, 0xee);
			setColor(PURPLE,  0xcc, 0x44, 0xcc);
			setColor(GREEN,   0x00, 0xcc, 0x55);
			setColor(BLUE,    0x00, 0x00, 0xaa); 
			setColor(YELLOW,  0xee, 0xee, 0x77);
			setColor(LTBROWN, 0xdd, 0x88, 0x55); 
			setColor(BROWN,   0x66, 0x44, 0x00); 
			setColor(LTRED,   0xfe, 0x77, 0x77); 
			setColor(GREY1,   0x33, 0x33, 0x33); 
			setColor(GREY2,   0x77, 0x77, 0x77);
			setColor(LTGREEN, 0xaa, 0xff, 0x66);
			setColor(LTBLUE,  0x00, 0x88, 0xff);
			setColor(GREY3,   0xbb, 0xbb, 0xbb);
			break;
												
		case C64SALLY:
			setColor(BLACK,   0x00, 0x00, 0x00);
			setColor(WHITE,   0xfc, 0xfc, 0xfc);
			setColor(RED,     0xc8, 0x00, 0x00);
			setColor(CYAN,    0x00, 0xfc, 0xfc);
			setColor(PURPLE,  0xfc, 0x00, 0xfc);
			setColor(GREEN,   0x00, 0xc8, 0x00);
			setColor(BLUE,    0x00, 0x00, 0xc8); 
			setColor(YELLOW,  0xfc, 0xfc, 0x00);
			setColor(LTBROWN, 0xfc, 0x64, 0x00); 
			setColor(BROWN,   0xc0, 0x64, 0x00); 
			setColor(LTRED,   0xfc, 0x64, 0x64); 
			setColor(GREY1,   0x40, 0x40, 0x40); 
			setColor(GREY2,   0x80, 0x80, 0x80);
			setColor(LTGREEN, 0x64, 0xfc, 0x64);
			setColor(LTBLUE,  0x64, 0x64, 0xf0);
			setColor(GREY3,   0xc0, 0xc0, 0xc0);
			break;

		case GRAYSCALE:
			setColor(BLACK,   0x10, 0x10, 0x10);
			setColor(WHITE,   0xff, 0xff, 0xff);
			setColor(RED,     0x70, 0x70, 0x70);
			setColor(CYAN,    0xE1, 0xE1, 0xE1);
			setColor(PURPLE,  0x8c, 0x8c, 0x8c);
			setColor(GREEN,   0xB9, 0xB9, 0xB9);
			setColor(BLUE,    0x55, 0x55, 0x55);
			setColor(YELLOW,  0xed, 0xed, 0xed);
			setColor(LTBROWN, 0xa5, 0xa5, 0xa5);
			setColor(BROWN,   0x78, 0x78, 0x78);
			setColor(LTRED,   0xb4, 0xb4, 0xb4);
			setColor(GREY1,   0x54, 0x54, 0x54);
			setColor(GREY2,   0x88, 0x88, 0x88);
			setColor(LTGREEN, 0xdc, 0xdc, 0xdc);			
			setColor(LTBLUE,  0xa7, 0xa7, 0xa7);
			setColor(GREY3,   0xc0, 0xc0, 0xc0);
			break;
																
		default:
			assert(0);
	}
#endif
}			
